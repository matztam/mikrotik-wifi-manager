#ifndef CONFIG_H
#define CONFIG_H

// ==================== CONFIGURATION ====================

// WiFi credentials (ESP32 home network)
// Can stay blank; set them later via the configuration portal.
const char* WIFI_SSID = "";
const char* WIFI_PASSWORD = "";

// MikroTik credentials
const char* MIKROTIK_IP = "192.168.88.1";
const char* MIKROTIK_USER = "wifi-manager";           // Basic Auth username
const char* MIKROTIK_PASS = "";                // Basic Auth password

// MikroTik WLAN interface name (e.g., "wlan1", "wlan2")
const char* MIKROTIK_WLAN_INTERFACE = "wlan1";

// Supported Wi-Fi bands (depends on hardware capabilities)
// MikroTik Groove without AC: "2ghz-g/n" and "5ghz-a/n"
// Newer hardware with AC: "2ghz-g/n" and "5ghz-a/n/ac"
const char* BAND_2GHZ = "2ghz-b/g/n";      // Or 2ghz-g/n; 2ghz-n
const char* BAND_5GHZ = "5ghz-a/n";      // Or "5ghz-a/n/ac" if the device supports it

// Scan behaviour
const int SCAN_DURATION_SECONDS = 5;        // MikroTik scan duration parameter
const int SCAN_RESULT_GRACE_MS = 2000;      // Extra wait time after duration before timing out
const int SCAN_POLL_INTERVAL_MS = 500;      // Interval between scan result polls
const char* SCAN_CSV_FILENAME = "tmp1/wlan-scan.csv";

// JSON buffer sizes (increase if MikroTik responses grow)
const size_t JSON_BUFFER_INTERFACES = 4096;
const size_t JSON_BUFFER_SECURITY_PROFILES = 12288;
const size_t JSON_BUFFER_SECURITY_PAYLOAD = 512;
const size_t JSON_BUFFER_DISK = 4096;
const size_t JSON_BUFFER_DISK_MUTATION = 128;
const size_t JSON_BUFFER_SCAN_REQUEST = 256;
const size_t JSON_BUFFER_FILE_LIST = 8192;
const size_t JSON_BUFFER_SCAN_RESPONSE = 8192;
const size_t JSON_BUFFER_CONNECT_REQUEST = 1024;
const size_t JSON_BUFFER_CONNECT_PAYLOAD = 512;

// Signal strength mapping (dBm range -> 0-100%)
const int SIGNAL_MIN_DBM = -100;
const int SIGNAL_MAX_DBM = -40;

// Arduino OTA update configuration
const bool OTA_ENABLE = true;                 // Set to false to disable Arduino OTA
const char* OTA_HOSTNAME = "mikrotik-interface";
const char* OTA_PASSWORD = "";                // Set a strong password before enabling OTA

// ESP32 Webserver Port
const int WEB_PORT = 80;

#endif
